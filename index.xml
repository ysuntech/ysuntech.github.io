<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>汇编吾信</title>
    <link>http://tech.mwq365.cn/</link>
    <description>Recent content on 汇编吾信</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>&amp;copy;汇编吾信 2017</copyright>
    <lastBuildDate>Wed, 15 Nov 2017 09:46:29 +0800</lastBuildDate>
    
	<atom:link href="http://tech.mwq365.cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>玩客云免费加速</title>
      <link>http://tech.mwq365.cn/money/wanke-speedup/</link>
      <pubDate>Wed, 15 Nov 2017 09:46:29 +0800</pubDate>
      
      <guid>http://tech.mwq365.cn/money/wanke-speedup/</guid>
      <description>&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;

&lt;p&gt;最近玩客云比较火，随着挖矿大军队伍壮大，收益每天递减，显得更加寒碜。本文介绍作者最近实验成功的一些提高上行带宽提高挖矿效率的技巧。&lt;/p&gt;

&lt;p&gt;关键词: 玩客云, 多拨, 并发拨号, 沃宽提速, 斐讯路由器, 高恪固件&lt;/p&gt;

&lt;p&gt;注意： 我的宽带是北京联通宽带，其它运营商是否支持多拨以及是否有效未测试。&lt;/p&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;我的宽带是50M联通沃宽,默认上行4M。 我有两台机器，一台挂1G硬盘，一台带2个32G U盘。 提速前，每台每天大致5个币。提速后平均13个币。

&lt;img src=&#34;http://tech.mwq365.cn/media/onecloud2.1.png&#34; alt=&#34;挂硬盘的玩客云&#34; /&gt;
&lt;img src=&#34;http://tech.mwq365.cn/media/onecloud1.png&#34; alt=&#34;挂U盘的玩客云&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python爬虫实现京东自动签到</title>
      <link>http://tech.mwq365.cn/spider/jd-auto-check-in/</link>
      <pubDate>Wed, 25 Oct 2017 10:00:00 +0800</pubDate>
      
      <guid>http://tech.mwq365.cn/spider/jd-auto-check-in/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;作为一名羊毛党，经常在京东上抢几张券，每天签到领取&amp;rdquo;京豆&amp;rdquo;。日复一日，每天手动操作，这有点违背程序员&amp;rdquo;Don&amp;rsquo;t Repeat Yourself&amp;rdquo;的原则。能不能让签到自动化呢？ 答案是肯定的。现在我们写点代码，让机器帮我们签到。将人工从简单的重复劳动中解救出来，这才是我们该干的事。&lt;/p&gt;

&lt;p&gt;在这里我们主要使用Selenium和python来实现功能。Selenium是一款自动化工具，可以用来实现自动化测试。我们用Python来操作Selenium，控制浏览器，模拟人工访问网站签到。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MongoDB聚合操作实战</title>
      <link>http://tech.mwq365.cn/db/mongo-aggregation/</link>
      <pubDate>Tue, 24 Oct 2017 15:00:00 +0800</pubDate>
      
      <guid>http://tech.mwq365.cn/db/mongo-aggregation/</guid>
      <description>&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;

&lt;p&gt;MongoDB使用起来不需要事先建表，可随时增加字段， 扩容比较方便。在数据量大，可靠性要求没那么苛刻时，我们会考虑MongoDB作为数据存储方案。&lt;/p&gt;

&lt;p&gt;例如，在游戏平台业务中： 存储游戏内用户的注册记录。collection名:app_user_reg, 字段包括 uid(用户ID), time(游戏内注册时间), appkey(游戏标识), channel(注册渠道)。&lt;/p&gt;

&lt;p&gt;一个用户可注册多个游戏。有这样一个需求: 批量查询每个用户的首次注册信息。如果使用窗口函数，查询比较简单。但MongoDB目前暂无窗口函数支持。 在经过资料查询和实验操作后，最终使用聚合操作实现需求。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用autossh穿透NAT访问内网服务器</title>
      <link>http://tech.mwq365.cn/ops/autossh/</link>
      <pubDate>Mon, 23 Oct 2017 18:10:00 +0800</pubDate>
      
      <guid>http://tech.mwq365.cn/ops/autossh/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;我猜想很多服务端工程师都希望有一台自己的主机，随时上去做点实验捣鼓捣鼓。嗯，也许你已经买了VPS，搭起个人博客。That&amp;rsquo;s good. 但总感觉少了点什么，VPS还是不受自己完全掌控。现在PC功耗越来越低，树莓派之类的硬件经济实惠，跑个WebServer没有问题。要是能随时访问家里的这些机器该多好。想法是好的，但实现起来有点问题：没有公网IP，我们该怎么访问这些机器呢？&lt;/p&gt;

&lt;p&gt;我们的主机躲在家庭路由器之后，只有宽带运营商提供的局域网IP。别灰心，如果有一台从公网访问的中继服务器，我们可以用autossh来实现NAT穿透，随时通过中继服务器访问家庭主机。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GO语言平滑重启</title>
      <link>http://tech.mwq365.cn/go/graceful/</link>
      <pubDate>Mon, 23 Oct 2017 11:09:26 +0800</pubDate>
      
      <guid>http://tech.mwq365.cn/go/graceful/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;Go语言运行效率和开发效率都比较高，适合用来开发网络服务程序，程序升级或者更新配置后，需要重启进程。&lt;/p&gt;

&lt;p&gt;在重过程中，老的请求没有处理完，新的请求不断进来，如何实现 &lt;em&gt;不中断服务&lt;/em&gt; 用户无感知 ，也就是&amp;rdquo;&lt;em&gt;平滑重启&lt;/em&gt;&amp;ldquo;？&lt;/p&gt;

&lt;h2 id=&#34;整体思路&#34;&gt;整体思路&lt;/h2&gt;

&lt;p&gt;新版本文件就绪后，从命令行发送信号 &amp;mdash;&amp;gt; 老的进程fork出子进程，exec新版程序 &amp;mdash;&amp;gt; 子进程从原有listener socket获取连接，处理新请求 &amp;mdash;&amp;gt; 父进程停止接受新连接， 处理完所有已获取的请求 &amp;mdash;&amp;gt; 父进程退出 &amp;mdash;&amp;gt; 重启完成
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GO语言模板【一】：基本用法</title>
      <link>http://tech.mwq365.cn/go/template-basic/</link>
      <pubDate>Mon, 23 Oct 2017 10:49:28 +0800</pubDate>
      
      <guid>http://tech.mwq365.cn/go/template-basic/</guid>
      <description>&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;

&lt;p&gt;使用GO编写CMS系统时，我们需要用到模板功能。GO标准库提供了两个库来支持模板功能: text/template, html/template。本文主要介绍模板的基本用法。&lt;/p&gt;

&lt;h2 id=&#34;模板的基本用法&#34;&gt;模板的基本用法&lt;/h2&gt;

&lt;p&gt;模板使用基本分为3个步骤:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;声明模板
直接template.New(&amp;ldquo;模板名&amp;rdquo;) 就行,模板名是自定义的块名，不一定是文件名。在第三步&amp;rdquo;执行&amp;rdquo;阶段可能需要用到。&lt;/li&gt;
&lt;li&gt;解析|编译模板
解析是指分析模板内容，编译处理。 模板内容可以是字符串，也可以存放在文件中。&lt;/li&gt;
&lt;li&gt;给模板赋值，执行输出
执行是指将数据赋值给第二步编译好的模板，渲染输出。如果已经定义多个模板块，可以指定块名，只渲染相应的块。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Airflow调度系统教程【二】:分布式和常见问题</title>
      <link>http://tech.mwq365.cn/data/airflow-tutorial-2/</link>
      <pubDate>Sat, 21 Oct 2017 23:00:00 +0800</pubDate>
      
      <guid>http://tech.mwq365.cn/data/airflow-tutorial-2/</guid>
      <description>&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;

&lt;p&gt;这是Airflow调度系统系列文章中的第二篇，主要介绍airflow调度系统的分布式设置和一些常见问题。
在大数据统计工作中，我们有一系列的程序任务需要运行。这些任务运行时间长，任务之间往往存在依赖关系，再加上任务运行的系统环境稳定性较差，导致数据结果要么不能按时生成，要么生成的数据结果不正确。而且每次出现故障后，手动修复数据的效率低下。&lt;/p&gt;

&lt;p&gt;直到引入Airflow调度系统，这些问题都得到了较好的解决。Airflow对任务之间的依赖关系支持非常好。分布式部署更能提高任务处理效率和系统可用性。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用hugo搭建博客站点</title>
      <link>http://tech.mwq365.cn/web/blog-with-hugo/</link>
      <pubDate>Fri, 20 Oct 2017 17:43:56 +0800</pubDate>
      
      <guid>http://tech.mwq365.cn/web/blog-with-hugo/</guid>
      <description>&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;

&lt;p&gt;作为web技术从业人员，经常有一些笔记心得需要记录。可以选择在csdn或者oschina等站点写博客。也有人购买VPS，用wordpress搭建自己的博客。这样比较自由，但购买VPS，搭建lamp环境需要一定的time和money。其实有更简单的解决方案：使用hugo和github pages搭建全静态免费博客。&lt;/p&gt;

&lt;h2 id=&#34;搭建博客&#34;&gt;搭建博客&lt;/h2&gt;

&lt;p&gt;让我们开始吧,按步骤来：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载hugo软件，图省事可以直接下载二进制版本&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;将下载得到的hugo二进制文件加入PATH环境变量。这样我们可以从命令行输入&amp;rdquo;hugo&amp;rdquo;随时调用hugo&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;初始化博客项目&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~
# 创建名为hugo_blog的博客站点
hugo new site hugo_blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Airflow调度系统教程【一】:安装</title>
      <link>http://tech.mwq365.cn/data/airflow-tutorial-1/</link>
      <pubDate>Fri, 20 Oct 2017 13:40:18 +0800</pubDate>
      
      <guid>http://tech.mwq365.cn/data/airflow-tutorial-1/</guid>
      <description>&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;

&lt;p&gt;Airflow是一套开源任务调度系统，可以完善地处理任务之间的依赖关系，界面美观，操作方便，可扩展性较强。&lt;/p&gt;

&lt;p&gt;这是Airflow调度系统系列文章中的第一篇，主要介绍环境搭建,插件安装和简单设置。&lt;/p&gt;

&lt;h2 id=&#34;特点&#34;&gt;特点&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Airflow是一个通用型任务调度系统，使用Python编写&lt;/li&gt;
&lt;li&gt;任务调度使用Python代码定义，比较灵活；&lt;/li&gt;
&lt;li&gt;支持任务间的依赖关系；&lt;/li&gt;
&lt;li&gt;支持多种调度策略，包括分布式调度(通过Celery实现)；&lt;/li&gt;
&lt;li&gt;自带较为美观的Web UI，操作方便。&lt;/li&gt;
&lt;li&gt;自带日志查看，任务监控等常见功能；&lt;/li&gt;
&lt;li&gt;注意：不能替代crontab，管理数据分析任务脚本以及其它cron任务。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>