<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>平滑重启 on 汇编吾信</title>
    <link>http://tech.mwq365.cn/tags/%E5%B9%B3%E6%BB%91%E9%87%8D%E5%90%AF/</link>
    <description>Recent content in 平滑重启 on 汇编吾信</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 23 Oct 2017 11:09:26 +0800</lastBuildDate>
    
	<atom:link href="http://tech.mwq365.cn/tags/%E5%B9%B3%E6%BB%91%E9%87%8D%E5%90%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GO语言平滑重启</title>
      <link>http://tech.mwq365.cn/go/graceful/</link>
      <pubDate>Mon, 23 Oct 2017 11:09:26 +0800</pubDate>
      
      <guid>http://tech.mwq365.cn/go/graceful/</guid>
      <description>背景 Go语言运行效率和开发效率都比较高，适合用来开发网络服务程序，程序升级或者更新配置后，需要重启进程。
在重过程中，老的请求没有处理完，新的请求不断进来，如何实现 不中断服务 用户无感知 ，也就是&amp;rdquo;平滑重启&amp;ldquo;？
整体思路 新版本文件就绪后，从命令行发送信号 &amp;mdash;&amp;gt; 老的进程fork出子进程，exec新版程序 &amp;mdash;&amp;gt; 子进程从原有listener socket获取连接，处理新请求 &amp;mdash;&amp;gt; 父进程停止接受新连接， 处理完所有已获取的请求 &amp;mdash;&amp;gt; 父进程退出 &amp;mdash;&amp;gt; 重启完成
技术分析  重启如何操作  程序中设置信号处理方法；通过命令行向进程发送信号
os/signal 提供了相关功能。 配置好信号接收管道，程序中从管道获取信号，按需处理即可。
 如何让新进程接收并处理新的请求  我们的服务一般会监听端口，重启后的进程也需要监听相同端口。如果直接从头Bind，系统会直接报错：
listen tcp :8021: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted.  正确的做法是复用原有的listener socket，那么新的问题来了
 如何在进程间传递socket  unix环境下，一切皆文件。socket也是文件。貌似跨文件读同一个文件很正常。但socket比较特殊，我们并不能像普通文件那样按文件名重新打开，然后使用。 好在*nix环境下父子进程是可以共享文件描述符的。准确的说是fork之后，子进程获得了和父进程一样的文件描述符表。但如果接下来exec，并且文件打开时设置了CLOSE_ON_EXEC标志位，这些文件会被关闭。好不容易共享到的文件描述符全都失效。而且在Go语言中，此标记默认打开。
参考: https://blog.kghost.info/2013/04/27/fork-multi-thread/
但是Go语言也考虑到了共享文件描述符的需求，在os/exec包中可以新建Cmd结构，并设置 ExtraFiles 字段，实现共享文件描述符。
跨进程共享socket问题解决了，这时新老进程都可以读写listener socket。
 老进程如何“优雅”退出  父进程在退出前需要完成这么几件事: - 停止从listener socket获取新的客户端连接 - 完成重启过程中还没finish的请求，&amp;rdquo;站好最后一班岗&amp;rdquo; - 为了避免长时间的等待，需要设置超时，关闭keepalive - 关闭listener socket</description>
    </item>
    
  </channel>
</rss>